#!/usr/bin/env node
/**
 * Simple validation script to test the refactored API client filtering logic
 */

const { execSync } = require("child_process")

console.log("üîç Validating API Client Refactoring...\n")

// Check if files exist
const fs = require("fs")
const requiredFiles = [
	"src/tools/api-client.ts",
	"src/tools/types/api-client-types.ts",
	"src/tools/QuestionEventHandler.ts",
	"src/tools/__tests__/api-client-filtering.test.ts",
]

console.log("‚úÖ Checking required files exist...")
requiredFiles.forEach((file) => {
	if (!fs.existsSync(file)) {
		console.error(`‚ùå Missing file: ${file}`)
		process.exit(1)
	}
	console.log(`   ‚úì ${file}`)
})

// Check TypeScript compilation
console.log("\n‚úÖ Checking TypeScript compilation...")
try {
	execSync("npx tsc --noEmit --project src/tsconfig.json", { stdio: "pipe" })
	console.log("   ‚úì TypeScript compilation successful")
} catch (error) {
	console.error("‚ùå TypeScript compilation failed:", error.message)
	process.exit(1)
}

// Check for key refactoring changes
console.log("\n‚úÖ Checking refactoring changes...")
const apiClientContent = fs.readFileSync("src/tools/api-client.ts", "utf8")

// Check that ClientContentFilter has formatAndOutputEvent method
if (apiClientContent.includes("formatAndOutputEvent(event: StreamEvent, timestamp: string)")) {
	console.log("   ‚úì ClientContentFilter has formatAndOutputEvent method")
} else {
	console.error("‚ùå ClientContentFilter missing formatAndOutputEvent method")
	process.exit(1)
}

// Check that StreamProcessor delegates to ClientContentFilter
if (apiClientContent.includes("contentFilter.formatAndOutputEvent(event, timestamp)")) {
	console.log("   ‚úì StreamProcessor delegates to ClientContentFilter")
} else {
	console.error("‚ùå StreamProcessor not delegating to ClientContentFilter")
	process.exit(1)
}

// Check that duplicate filtering options are removed from StreamProcessor
if (
	!apiClientContent.includes("private showResponse: boolean") &&
	!apiClientContent.includes("private showThinking: boolean")
) {
	console.log("   ‚úì Duplicate filtering options removed from StreamProcessor")
} else {
	console.error("‚ùå Duplicate filtering options still present in StreamProcessor")
	process.exit(1)
}

// Check ContentFilterOptions interface
const typesContent = fs.readFileSync("src/tools/types/api-client-types.ts", "utf8")
if (
	typesContent.includes("showTokenUsage: boolean") &&
	typesContent.includes("hideTokenUsage: boolean") &&
	typesContent.includes("verbose: boolean")
) {
	console.log("   ‚úì ContentFilterOptions interface updated correctly")
} else {
	console.error("‚ùå ContentFilterOptions interface not updated correctly")
	process.exit(1)
}

// Check StreamProcessorOptions interface
if (!typesContent.includes("showResponse?: boolean") || !typesContent.includes("showThinking?: boolean")) {
	console.log("   ‚úì StreamProcessorOptions interface cleaned up")
} else {
	console.error("‚ùå StreamProcessorOptions interface still has duplicate options")
	process.exit(1)
}

console.log("\nüéâ All refactoring validations passed!")
console.log("\nüìã Summary of changes:")
console.log("   ‚Ä¢ ClientContentFilter now handles all output formatting")
console.log("   ‚Ä¢ StreamProcessor simplified to delegate all output to ClientContentFilter")
console.log("   ‚Ä¢ Duplicate filtering options removed from StreamProcessor")
console.log("   ‚Ä¢ Output methods consolidated (console.log vs process.stdout.write)")
console.log("   ‚Ä¢ ContentFilterOptions interface expanded with required properties")
console.log("   ‚Ä¢ StreamProcessorOptions interface simplified")
console.log("   ‚Ä¢ Test suite created for comprehensive validation")
console.log("\n‚úÖ API Client output filtering refactoring completed successfully!")
